<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd">
                           
		<!-- 
			context:annotation-config 태그는 어노테이션과 관련해서 
			다음의 BeanPostProcessor를 함께 등록 한다.
			- @Required(RequiedAnnotationBeanPostProcessor)
			- @Autowired(AutowiredAnnotationBeanPostProcessor)
			- @Resource, @PostConstruct, @PreDestory(CommonAnnotationBeanPostProcessor)
			- @Configuration(ConfigurationClassPostProcessor)
			
			자동 빈객체 생성 : <context:component-scan>
			<context:component-scan base-package="com.controller"
			
			공통빈			
			@Controller
			Presentation Layer에서 Contoller를 명시하기 위해서 사용
		​			
			@Service
			Business Layer에서 Service를 명시하기 위해서 사용
			​
			@Repository 
			Persistence Layer에서 DAO를 명시하기 위해서 사용
			
			@Component
			그 외에 자동으로 스캔해서 등록하고 싶은 것들을 위해 사용
			
	-->
	<!-- @Autowired 자동 처리를 빈객체 자동 생성 등록 -->
	
	<context:annotation-config />                    
                                 
	<!-- 공통 빈 -->
	<bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
	
	

	
	<!-- TEST_1  -->
	<bean id="helloController" class="com.controller.HelloController"></bean>


	<!-- TEST_2 -->
	<!-- 
		하나의 요청 주소 (전송방식) : GET, POST
		화면, 서비스 처리 판단
		전제조건 : 요청주소는 같다.
		
		id 는 다른객체가 다른 객체를 injection 할때만 필요
	 -->
	<bean id="articleservice" class="com.service.ArticleService"></bean>
	<bean class="com.controller.NewArticleController" ></bean>
	
	
	<!-- TEST_3 parameter List<OrderItem> -->
	<bean class="com.controller.OrderController" ></bean>
	
	
	<!-- TEST_4  @RequestParam -->
	<bean class="com.controller.SearchController" ></bean>
	
	<!-- TEST_5  @CookieValue -->
	<bean class="com.controller.CookieController" ></bean>
	
	
	<!-- TEST_6  파일 업로드
	import org.springframework.web.multipart.commons.CommonsMultipartResolver;
	import org.springframework.web.multipart.commons.CommonsMultipartFile;
	
	CommonsMulitpartFile 사용해서 업로드 할려면 몇가지 기본 세팅해야함 
	
	CommonsMulitpartResolver : 업로드한 파일에 대한 정보를 관리 (크기, 이름... )
	
	파일 처리 ( 의존 객체 )
	spring-framework-3.0.2.RELEASE-dependencies/org.apache.commons/com.springsource.org.apache.commons.fileupload/1.2
	spring-framework-3.0.2.RELEASE-dependencies/org.apache.commons/com.springsource.org.apache.commons.io/1.4.0
	
	CommonsMultipartResolver : 업로드한 파일에 정보 관리 (크기, 이름, 중복이름 정책)
	
	-->
	<bean class="com.controller.imageController"></bean>
	
	<!-- 파일업로드 보조(반드시) -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10485760"></property>
		<property name="defaultEncoding" value="UTF-8"></property>
	</bean>
	
	
</beans> 


